---------------------------------------
Test the "small" sample specification.
---------------------------------------

    >>> sample = 'playbook-vagrant-myapp.yml'

    >>> extras = r"""
    ... notify_email: test@example.com
    ... mandrill: off
    ... cloudflare: off
    ... """

    >>> import subprocess
    >>> import sys
    >>> import time

Set up local-configure.yml by copying our sample.
Append admin email and password.

    >>> with open(sample, 'r') as f:
    ...     with open('local-configure.yml', 'w') as g:
    ...         g.write(f.read() + extras)

Vagrant up

    >>> print >> sys.stderr, "Bringing up %s" % box
    >>> run("vagrant up %s --no-provision" % box)

Vagrant provision -- unless contraindicated.

    >>> if skip_provisioning:
    ...     print >> sys.stderr, "Skipping provisioning"
    ... else:
    ...     print >> sys.stderr, "Provisioning"
    ...     o = run("vagrant provision %s" % box)

Reboot the box. We only care about what survives a restart.

    >>> print >> sys.stderr, "Poweroff %s" % box
    >>> p = subprocess.call('vagrant ssh %s -c "sudo poweroff"' % box, shell=True)

    >>> time.sleep(10)
    >>> print >> sys.stderr, "Bringing %s back up" % box
    >>> run("vagrant up %s --no-provision" % box)
    >>> print >> sys.stderr, "Waiting for services to start..."
    >>> time.sleep(60)

And, now run tests against the box.

    >>> print >> sys.stderr, "Running tests against box"

Use lsof to make sure we are listening on all expected ports
in all expected ways.

    >>> rez = ssh_run('sudo lsof -i4 -i6 -sTCP:LISTEN -Pn | tail -n +2')
    >>> listeners = sorted(set(cut(rez, [0, 2, 8])))

    >>> print "\n".join([s for s in listeners if 'plone_daemon' in s])
    python2.7   plone_daemon    127.0.0.1:8081
    zeoserver   plone_daemon    127.0.0.1:8100

    >>> print "\n".join([s for s in listeners if 'haproxy' in s])
    <BLANKLINE>

    >>> print "\n".join([s for s in listeners if 'varnishd' in s])
    varnishd    root    127.0.0.1:6082...
    varnishd    varnish *:6081

    >>> print "\n".join([s for s in listeners if 'nginx' in s])
    nginx   ... *:80
    nginx   ... *:80

    # smtpd
    >>> print "\n".join([s for s in listeners if ':25' in s])
    master  root    *:25...

    >>> print "\n".join([s for s in listeners if 'munin' in s])
    munin-nod  root *:4949

Check the process list.

    >>> print ssh_run('ps  -eo comm,euser:15,egroup | egrep "(python|varnishd|nginx|haproxy|supervisor|memmon|munin|post|fail2ban)" | egrep -v "(egrep|systemd)" | sort | uniq')
    fail2ban-server root     root
    memmon          root     root
    munin-node      root     root
    nginx           root     root
    nginx           www-data www-data
    pickup          postfix  postfix
    python2.7       plone_daemon plone_group
    qmgr            postfix  postfix
    supervisord     root     root
    varnishd        root     root
    varnishd        varnish  varnish

Check supervisor's job list.

    >>> print joined_cut(ssh_run('sudo supervisorctl status'), [0, 1], True)
    zeoserver_memmon    RUNNING
    zeoserver_zeoclient1    RUNNING
    zeoserver_zeoserver RUNNING


We should be able to get a page on port 80.

    >>> print ssh_run('curl --ipv4 -I -s http://%s' % box)
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    X-Varnish: ...
    Age: 0
    Via: 1.1 varnish...
    X-Varnish-Cache: MISS

And, we should have gzip encoding available:

    >>> print ssh_run('curl --ipv4 -H "Accept-Encoding:gzip" -I -s http://%s' % box)
    HTTP/1.1 200 OK
    ...
    Content-Encoding: gzip...

Asking twice for a static resource should result in a cache hit.

    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png > /dev/null' % box)
    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png' % box)
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    Content-Type: image/png
    ...
    X-Varnish-Cache: HIT

The restart script exercises our control of the supervisor
processes, haproxy and varnish.

    >>> print ssh_run('sudo /usr/local/plone-5.0/zeoserver/scripts/restart_clients.sh')
    Restarting client 1
    zeoserver_zeoclient1: stopped
    Waiting a bit...
    zeoserver_zeoclient1: started
    Waiting a bit...
    Fetching Plone site-home page
    Purging varnish cache
    <BLANKLINE>
    Done

The varnish cache for this host should now be empty.

    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png' % box)
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    Content-Type: image/png
    ...
    X-Varnish-Cache: MISS


    >>> print >> sys.stderr, "Tests done"

