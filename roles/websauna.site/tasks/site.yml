---
- name: Install dependencies
  become: yes
  become_user: root
  apt: name={{ item }} state=installed update_cache=yes cache_valid_time=3600
  with_items: "{{ dependencies }}"

# Change Amazon EC2 ip-172-30-1-108 to something human readable
- name: Set hostname
  become: yes
  become_user: root
  hostname: name={{ ansible_host }}

- name: Set /etc/hosts for the current hostname
  become: yes
  become_user: root
  lineinfile:
    dest: /etc/hosts
    create: false
    state: present
    line: "127.0.1.1 {{ ansible_host }}"
    regexp: "{{ ansible_host }}"

- name: Create /srv/pyramid
  become: yes
  become_user: root
  file: path=/srv/pyramid state=directory

- name: Create a deploy location
  become: yes
  become_user: root
  file: path={{ deploy_location }} state=directory group=wsgi owner=wsgi mode="u=rwx,g=,o="

# Check if we have an already running site
- name: Check previous project checkouts
  stat: path={{ deploy_location }}/venv/bin/ws-backup
  register: previous_checkout
  become: yes
  become_user: wsgi

- name: Check we have correct Websauna install
  stat: path={{deploy_location}}/venv/bin/ws-dump-db
  register: previous_websauna
  become: yes
  become_user: wsgi

# Full checkout would break existing running application because loading .py files
# with models for which database tables do not exist
- name: "Run database migrations prior code update"
  include: premigrations.yml
  when: previous_checkout.stat.exists == True and previous_websauna.stat.exists == True

- name: Deploy Websauna application from a Git repository
  become: yes
  become_user: wsgi
  git: repo={{ git_repository }} dest={{deploy_location}} accept_hostkey=yes force=yes track_submodules=yes recursive=yes version={{ git_branch }}
  notify:
    - Restart uWSGI
    - Restart Celery worker
    - Restart Celery beat

- name: Create logs folder
  become: yes
  become_user: wsgi
  file: path={{ deploy_location }}/logs state=directory

- name: Create notebooks folder
  become: yes
  become_user: wsgi
  file: path={{ pyramid_notebook_notebook_folder }} state=directory

- name: Deploy INI config
  become: yes
  become_user: wsgi
  template: src=generated.ini dest={{ websauna_config_file }}

- name: Deploy site secrets
  become: yes
  become_user: wsgi
  template: src={{ ini_secrets_file }} dest={{ websauna_secrets_ini_file }}

- name: Check existence of virtualenv
  stat: path={{ deploy_location }}/venv
  register: has_virtualenv
  become: yes
  become_user: root

- name: Upgrade virtualenv to bugfixed versions
  become: yes
  become_user: root
  shell: pip install -U virtualenv

- name: Create virtualenv for app using chosen Python
  when: has_virtualenv.stat.exists == False
  shell: virtualenv --python={{ python_interpreter }} {{deploy_location}}/venv
  become: yes
  become_user: wsgi

- name: Activate virtualenv on login
  become: yes
  become_user: wsgi
  lineinfile: dest=/home/{{ wsgi_user }}/.profile regexp='^source /srv' line='source {{ deploy_location }}/venv/bin/activate'

- name: Enter to deployment directory on login
  become: yes
  become_user: wsgi
  lineinfile: dest=/home/{{ wsgi_user }}/.profile regexp='^cd /srv' line='cd {{ deploy_location }}'

# We don't use Ansible pip module here becuase
# https://github.com/ansible/ansible-modules-core/issues/2697
- name: Install Python packages
  become: yes
  become_user: wsgi
  command: "{{deploy_location}}/venv/bin/pip install --no-input -r {{deploy_location}}/requirements.txt --index-url={{ pypi_index_url }}"

- name: Install application package
  become: yes
  become_user: wsgi
  command: "{{deploy_location}}/venv/bin/pip install -e {{deploy_location}}"

# Copy letsencrypt key for our own use
- name: Copy letsencrypt key for our own use
  become: yes
  become_user: root
  shell: cp -L {{nginx_ssl_certificate_path_key}} {{websauna_conf_folder}}/privkey.pem

- name: Change mode and group of letsencrypt key
  become: yes
  become_user: root
  file: path="{{websauna_conf_folder}}/privkey.pem" group=wsgi owner=wsgi mode="u=rw,g=,o="

# - name: Copy letsencrypt key for our own use
#   become: yes
#   become_user: root
#   copy:
#     src: "{{nginx_ssl_certificate_path_key}}"
#     dest: "{{websauna_conf_folder}}/privkey.pem"
#     follow: yes
#     owner: wsgi
#     group: wsgi
#     mode: 0600
  # when: file.stat.exists

# Now run un-run migrations unconditionally regardless if we
# are a prisitine or already running site
- name: Run migrations after codebase update and for pristine sites
  include: postmigrations.yml

# If migrations somehow still fail now it's good time to start screaming
- name: Perform database sanity check
  become: yes
  become_user: wsgi
  command: "{{ deploy_location }}/venv/bin/ws-sanity-check {{ websauna_config_file }} chdir={{ deploy_location }}"

- name: Collect static files
  become: yes
  become_user: wsgi
  command: "{{ deploy_location }}/venv/bin/ws-collect-static {{ websauna_config_file }} chdir={{ deploy_location }}"

- name: Deploy uWSGI
  include: uwsgi.yml

- name: Deploy Nginx
  include: nginx.yml
  tags: nginx

- name: Deploy supervisor config
  become: yes
  become_user: root
  template: src={{ supervisor_config }} dest=/etc/supervisor/conf.d/site.conf
